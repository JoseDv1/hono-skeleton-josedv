{
	// Place your hono-skeleton-josedv workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"hono:service": {
		"prefix": "hono:service",
		"description": "Create a service CRUD Template",
		"body": [
			"export async function findService<T>(): Promise<T> {",
			"\t//TODO: Add logic to read/write data",
			"",
			"\treturn {} as T",
			"}",
			"export async function findByIdService<T>(id: Number): Promise<T> {",
			"\t//TODO: Add logic to read/write data",
			"",
			"\treturn {} as T",
			"}",
			"export async function createService<T>(data: T): Promise<T> {",
			"\t//TODO: Add logic to read/write data",
			"",
			"\treturn {} as T",
			"}",
			"export async function updateService<T>(id: Number, data: T): Promise<T> {",
			"\t//TODO: Add logic to read/write data",
			"",
			"\treturn {} as T",
			"}",
			"export async function deleteService<T>(id: Number): Promise<T> {",
			"\t//TODO: Add logic to read/write data",
			"",
			"\treturn {} as T",
			"}"
		]
	},

	"hono:route": {
		"prefix": "hono:route",
		"description": "Create API route template",
		"body": [
			"import { Hono } from \"hono\";",
			"",
			"import { getController, deleteController, getByIdController, postController,  putController } from \"@/controllers/${2:name}Controller\";",
			"",
			"export const ${1:RouterName}: Hono = new Hono();",
			"",
			"${1:RouterName}",
			"\t.get(\"/\", getController)",
			"\t.get(\"/:id\", getByIdController)",
			"\t.post(\"/\", postController)",
			"\t.put(\"/:id\", putController)",
			"\t.delete(\"/:id\", deleteController);",
			""
		]
	},
	"hono:controller": {
		"prefix": "hono:controller",
		"description": "",
		"body": [
			"import type { Context, } from \"hono\"",
			"// import {} from '@/services/${0:default}Service'",
			"",
			"// Get All Request Controller",
			"export const getController = async (ctx: Context): Promise<Response> => {",
			"\ttry {",
			"\t\t// TODO: Call Service here..",
			"",
			"\t\treturn ctx.json({",
			"\t\t\tmessage: 'GET request'",
			"\t\t})",
			"\t} catch (err: any) {",
			"\t\tctx.status(400)",
			"\t\treturn ctx.json({",
			"\t\t\terror: err.message",
			"\t\t})",
			"\t}",
			"}",
			"",
			"// Get By Id Request Controller",
			"export const getByIdController = async (ctx: Context): Promise<Response> => {",
			"\ttry {",
			"\t\tconst { id } = ctx.req.param()",
			"\t\t// TODO: Call Service here...",
			"",
			"",
			"",
			"\t\treturn ctx.json({",
			"\t\t\tmessage: 'GET request'",
			"\t\t})",
			"\t} catch (err: any) {",
			"\t\tctx.status(400)",
			"\t\treturn ctx.json({",
			"\t\t\terror: err.message",
			"\t\t})",
			"\t}",
			"}",
			"",
			"// Post Request Controller",
			"export const postController = async (ctx: Context): Promise<Response> => {",
			"\ttry {",
			"\t\t// TODO: Call Service here...",
			"",
			"\t\treturn ctx.json({",
			"\t\t\tmessage: 'POST request'",
			"\t\t})",
			"\t} catch (err: any) {",
			"\t\tctx.status(400)",
			"\t\treturn ctx.json({",
			"\t\t\terror: err.message",
			"\t\t})",
			"\t}",
			"}",
			"",
			"// Put Request Controller",
			"export const putController = async (ctx: Context): Promise<Response> => {",
			"\ttry {",
			"\t\tconst { id } = ctx.req.param()",
			"\t\t// TODO: Call Service here...",
			"",
			"",
			"",
			"\t\treturn ctx.json({",
			"\t\t\tmessage: 'PUT request'",
			"\t\t})",
			"\t} catch (err: any) {",
			"\t\tctx.status(400)",
			"\t\treturn ctx.json({",
			"\t\t\terror: err.message",
			"\t\t})",
			"\t}",
			"}",
			"",
			"// Delete Request Controller",
			"export const deleteController = async (ctx: Context): Promise<Response> => {",
			"\ttry {",
			"\t\tconst { id } = ctx.req.param()",
			"\t\t// TODO: Call Service here...",
			"",
			"\t\treturn ctx.json({",
			"\t\t\tmessage: 'DELETE request'",
			"\t\t})",
			"",
			"\t} catch (err: any) {",
			"\t\tctx.status(400)",
			"\t\treturn ctx.json({",
			"\t\t\terror: err.message",
			"\t\t})",
			"\t}",
			"}"
		]
	},
	"hono:uroute": {
		"prefix": "hono:uroute",
		"description": "",
		"body": ["app.route('/api/v1/${1:Route}', ${2:Router})"]
	}
}
